# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

#this means when you push to the master branch, a build is triggered
trigger:
  - main

#using the latest windows image to as SDK etc
pool:
  vmImage: 'windows-latest'

#setting variables
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

#adds the NuGet installer
steps:
- task: NuGetToolInstaller@1
#this task restores the solution
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'RpsGameDemoServiceConnection'
    organization: 'markmoore0827'
    scannerMode: 'MSBuild'
    projectKey: 'markmoore0827_azurePipelineMvcDemo'
    projectName: 'azurePipelineMvcDemo'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: './RpsGame/RPS_GameMvc.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: SonarCloudAnalyze@1

#this task is for building
# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

#WE HAVE NO TESTS YET. but this will test and collect the code coverage
# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: '**/*Tests/*.csproj'
#     arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

#this is MAYBE for collecting the test coverage????? 
# - script: dotnet test <test-project> --logger trx --collect "Code coverage"
# - task: PublishTestResults@2
#   inputs:
#     testRunner: VSTest
#     testResultsFiles: '**/*.trx'

#ALTERNATIVE TESTING -- this task is for testing
# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
# we need to add the reporting of test results to SonarCloud

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# - task: AzureRmWebAppDeployment@4
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
#     appType: 'webApp'
#     WebAppName: 'RockPaperScissorsDemoSite'
#     ResourceGroupName: 'Rpg_GameMvcApp'
#     packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'


- task: AzureWebApp@1
  inputs:
    azureSubscription: 'Azure subscription 1(5d150957-9944-40b9-b9e9-2a32c983a1f8)'
    appType: 'webApp'
    appName: 'RockPaperScissorsDemoSite'
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
    deploymentMethod: 'auto'

- task: PublishBuildArtifacts@1